事务管理
事务：是一系列不可分割的操作，用来保持数据的完整性，一致性。
具有：原子性，一致性，隔离性，持久性。
/**
 * 添加事务注解
 * 1.propagation 事务的传播行为，当前事务被另一个事务调用时，
 * 如何使用事务，默认取值：REQUIRED，使用调用方法的事务。
 * REQUIRED_NEW:使用自己的事务，调用方法的事务被挂起。
 * 2.isolation 指定事务的隔离级别，最常用的取值，READ_COMMITTED
 * 3.默认情况下 Spring 的声明式事务对所有的运行时异常进行回滚. 也可以通过对应的
 *   属性进行设置. 通常情况下去默认值即可.
     rollbackFor={exception}
     noRollbackFor={exception}
 * 4.使用readOnly指定事务是否为只读，只读表示读取数据但不更新数据
 * 这样可以帮助数据库引擎优化事务. 若真的事一个只读取数据库值的方法,
 * 应设置 readOnly = true.
 * 5.使用timeout指定强制回滚之前事务可以占用的时间
 *   防止长连接。
 *
 * @param username
 * @param isbn
 */
@Transactional(propagation = Propagation.REQUIRES_NEW,
                isolation = Isolation.READ_COMMITTED,
                readOnly = false,
                timeout = 3)
悲观锁：select * from table where id = #{id} for update 锁行
        update

乐观锁：select * from table where id = #{id}
        update set name = #{name}
                    version = version +1
        where id = #{id}
        and version = #{version}
事务并发所导致的问题:
脏读：T1读取了T2已更新但未提交的数据，若T2回滚了，则T1脏读。
不可重复读：T1读取了一个字段，然后T2更新了该字段，
           T1再次读取同一个字段，值就不同了。
幻读：T1从一个表中读取了一个字段，然后T2在该表中插入了
新的数据，之后T1再次读取同一个表，就会多出几行。
READ_COMMITTED 读已提交。
