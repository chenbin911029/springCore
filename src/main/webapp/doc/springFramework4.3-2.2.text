2017-11-17
Spring20个模块分别包含在以下几个分组里面：
1.core container
    a.spring-core
    b.spring-beans
        提供了框架的基本部分,包括IoC和依赖注入功能, BeanFactory是工厂模式的一个复杂的实现。
    c.spring-context
        Context模块从Beans模块中继承了它的特性,并增加了对国际化（例如使用资源包），
        事件传播，资源加载以及通过例如Servlet容器进行上下文透明创建的支持。
        Context模块还支持Java EE功能，如EJB，JMX和基本的远程处理。
    d.spring-context-support
        提供了将常见的第三方库集成到Spring应用上下文（EhCache，Guava，JCache），
        邮件（JavaMail），调度（CommonJ，Quartz）
        和模板引擎（FreeMarker，JasperReports，Velocity）
    e.spring-expression
        模块为运行时查询和操作对象图提供了强大的表达式语言。
        它是JSP 2.1规范中规定的统一表达式语言（统一EL）的扩展。
        该语言支持设置和获取属性值，属性赋值，方法调用，访问数组的内容，集合和索引器，
        逻辑和算术运算符，命名变量以及从Spring的IoC容器中按名称检索对象。
        它还支持列表预测和选择以及常用列表聚合。
2.data access/intergration
数据访问/集成层由JDBC，ORM，OXM，JMS和事务模块组成。
    spring-jdbc:
        spring-jdbc模块提供了一个JDBC抽象层，
        不需要进行单调乏味的JDBC编码和解析数据库供应商特定的错误代码。
    spring-orm:
        spring-orm模块为流行的对象关系映射API提供了集成层，
        包括JPA，JDO和Hibernate。 使用spring-orm模块，可以将所有这些O / R
        映射框架与Spring提供的所有其他功能结合使用，
        例如前面提到的简单的声明式事务管理功能。
    spring-oxm:
        spring-oxm模块提供了支持JAXB，Castor，
        XMLBeans，JiBX和XStream等对象/ XML映射实现的抽象层。
    spring-jms:
        spring-jms模块（Java消息传递服务）包含用于生成和消费消息的功能。
        自Spring Framework 4.1以来，它提供了与Spring消息传递模块的集成。
    spring-tx:
        spring-tx模块支持实现特殊接口和所有POJO（普通Java对象）
        的类的编程和声明式事务管理。
3.web,
    spring-web:
        Spring-Web模块提供了基本的面向Web的集成功能，
        例如多部分文件上传功能和使用Servlet侦听器对IoC容器进行初始化
        以及面向Web的应用程序上下文。
        它还包含一个HTTP客户端和Spring远程处理支持的Web相关部分。
    spring-webmvc:
        spring-webmvc模块（也称为Web-Servlet模块）
        包含Spring的模型 - 视图 - 控制器（MVC）和Web应用程序的REST Web服务实现。
         Spring的MVC框架提供了域模型代码和Web表单之间的清晰分离，
         并且与Spring框架的所有其他功能集成在一起。
    spring-websocket:
    spring-webmvc-portlet:
        spring-webmvc-portlet模块（也称为Web-Portlet模块）
        提供了在Portlet环境中使用的MVC实现，
        并反映了基于Servlet的spring-webmvc模块的功能。

4.aop
spring-aop模块提供了一个符合AOP联盟的面向方面编程实现，
允许您定义方法拦截器和切入点，以干净地分离实现应该分离的功能的代码。

5.aspects
独立的spring-aspects模块提供与AspectJ的集成。

6.instrumentation
弹簧仪器模块提供了在特定应用服务器中使用的类仪器支持和类加载器实现。
spring-instrument-tomcat模块包含了Tomcat的Spring工具代理。

7.messaging
Spring Framework 4包括一个Spring集成项目中的关键抽象的Spring消息模块，
如Message，MessageChannel，MessageHandler等，作为基于消息传递的应用程序的基础。 该模块还包括一组用于将消息映射到方法的注释，类似于基于Spring MVC注释的编程模型。

8.test

Part II. What’s New in Spring Framework 4.x

2017-11-20
Core Technologies
7.The IoC container
方法注入是Spring IoC容器的一个高级特性，它允许以干净的方式处理这个用例

Scope	Description
singleton
(Default) Scopes a single bean definition to a single object instance per Spring IoC container.
prototype
Scopes a single bean definition to any number of object instances.
request
Scopes a single bean definition to the lifecycle of a single HTTP request; that is, each HTTP request has its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring ApplicationContext.
session
Scopes a single bean definition to the lifecycle of an HTTP Session. Only valid in the context of a web-aware Spring ApplicationContext.
globalSession
Scopes a single bean definition to the lifecycle of a global HTTP Session. Typically only valid when used in a Portlet context. Only valid in the context of a web-aware Spring ApplicationContext.
application
Scopes a single bean definition to the lifecycle of a ServletContext. Only valid in the context of a web-aware Spring ApplicationContext.
websocket
Scopes a single bean definition to the lifecycle of a WebSocket. Only valid in the context of a web-aware Spring ApplicationContext

The singleton scope:
This single instance is stored in a cache of such singleton beans, and all subsequent requests and references for that named bean return the cached object.
such that one and only one instance of a particular class is created per ClassLoader.

7.5.2 The prototype scope
the creation of a new bean instance every time a request for that specific bean is made

@RequestScope
@SessionScope

2017-12-19
基于注解的配置
<context:annotation-config/>

2018-03-01
@Required 注释适用于bean属性setter方法
@Autowired You can apply the @Autowired annotation to constructors:
@Autowired，@Inject，@Resource，和@Value注释由Spring处理
@Qualifier
@Primary 是可以确定一个主要候选人时使用多个实例的自动装配的有效方法。

public class MovieRecommender {

    @Autowired
    @Qualifier("main")
    private MovieCatalog movieCatalog;

    // ...
}

@Resource注释，该注释在语义上定义为通过其唯一名称来标识特定目标组件，并且声明的类型与匹配过程无关。

自定义注解
@Target({ElementType.FIELD, ElementType.PARAMETER})
@Retention(RetentionPolicy.RUNTIME)
@Qualifier
public @interface Offline {

}

public class MovieRecommender {

    @Autowired
    @Offline
    private MovieCatalog offlineCatalog;

    // ...
}


@Target({ElementType.FIELD, ElementType.PARAMETER})
@Retention(RetentionPolicy.RUNTIME)
@Qualifier
public @interface MovieQualifier {

    String genre();

    Format format();
}

public enum Format {
    VHS, DVD, BLURAY
}

public class MovieRecommender {

    @Autowired
    @MovieQualifier(format=Format.VHS, genre="Action")
    private MovieCatalog actionVhsCatalog;

    @Autowired
    @MovieQualifier(format=Format.VHS, genre="Comedy")
    private MovieCatalog comedyVhsCatalog;

    @Autowired
    @MovieQualifier(format=Format.DVD, genre="Action")
    private MovieCatalog actionDvdCatalog;

    @Autowired
    @MovieQualifier(format=Format.BLURAY, genre="Comedy")
    private MovieCatalog comedyBluRayCatalog;

    // ...
}

使用反射获取注解中的赋值。
/**
 * 网关操作工具类
 * @author LanBin Lai at 2017/12/20 15:33
 */
public class PaymentGateway {

    public static  <T extends SendDTO> Map<String,Object> toMap(T t) {
        Class clazz = t.getClass();
        String url = "";
        if (clazz.isAnnotationPresent(CustodyURLAnnotation.class)){
            CustodyURLAnnotation custodyURLAnnotation = (CustodyURLAnnotation) clazz.getAnnotation(CustodyURLAnnotation.class);
            url = custodyURLAnnotation.url();
        }else {
            //todo
        }
        if(url == null){
            //todo
        }
//        url = CustodyURL.TEST_IP;
        Map<String, Object> map = CustodyUtil.toMapAndSignForGateway(t);
        map.put("serviceName", url);// 接口名称
        return map;
    }


}

在专属情况下，@Resource不指定明确的名称
2018-03-02
public class CachingMovieLister {

    @PostConstruct
    public void populateMovieCache() {
        // populates the movie cache upon initialization...
    }

    @PreDestroy
    public void clearMovieCache() {
        // clears the movie cache upon destruction...
    }
}

@PostConstruct 初始化回调函数
@PreDestroy 销毁回调函数
@Value("${custody.cert.path}") 读取配置文件中的键对应的值
@Component 声明为组件，类路径扫描时可以扫到。
@Repository 持久层 注释是用于满足所述角色或任何类的标记 构造型的存储库（也被称为数据访问对象或DAO）的
@Service 服务层
@Controller 控制层

元注释也可以组合起来创建组合注释。例如，@RestController从Spring MVC的注解组成的@Controller和 @ResponseBody。

自定义注解
@Target({ElementType.TYPE, ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Scope(WebApplicationContext.SCOPE_SESSION)
public @interface SessionScope {

    /**
     * Alias for {@link Scope#proxyMode}.
     * <p>Defaults to {@link ScopedProxyMode#TARGET_CLASS}.
     */
    @AliasFor(annotation = Scope.class)
    ScopedProxyMode proxyMode() default ScopedProxyMode.TARGET_CLASS;

}

//若不指定proxyMode的值，则默认使用注解中的默认值
@SessionScope can then be used without declaring the proxyMode as follows:

@Service
@SessionScope
public class SessionScopedService {
    // ... default "defaultValue"
}

//或者可以重新定义proxyMode的值
Or with an overridden value for the proxyMode as follows:

@Service
@SessionScope(proxyMode = ScopedProxyMode.INTERFACES)
public class SessionScopedUserService implements UserService {
    // ...
}

Java配置文件
@Configuration
@ComponentScan(basePackages = "org.example")
public class AppConfig  {
    ...
}

用xml替代表示如下：
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="org.example"/>

</beans>

The use of <context:component-scan> implicitly enables the functionality of <context:annotation-config>.
There is usually no need to include the <context:annotation-config> element when using <context:component-scan>.

7.10.4使用过滤器来自定义扫描

The following example shows the configuration ignoring all @Repository annotations and using "stub" repositories instead.
@Configuration
@ComponentScan(basePackages = "org.example",
        includeFilters = @Filter(type = FilterType.REGEX, pattern = ".*Stub.*Repository"),
        excludeFilters = @Filter(Repository.class))
public class AppConfig {
    ...
}

and the equivalent using XML

<beans>
    <context:component-scan base-package="org.example">
        <context:include-filter type="regex"
                expression=".*Stub.*Repository"/>
        <context:exclude-filter type="annotation"
                expression="org.springframework.stereotype.Repository"/>
    </context:component-scan>
</beans>

By default, any Spring stereotype annotation (@Component, @Repository, @Service, and @Controller)
that contains a name value will thereby provide that name to the corresponding bean definition.

If such an annotation contains no name value or for any other detected component (such as those discovered by custom filters),
the default bean name generator returns the uncapitalized non-qualified class name. For example, if the following two components were detected,
the names would be myMovieLister and movieFinderImpl:

@Service("myMovieLister")
public class SimpleMovieLister {
    // ...
}

@Repository
public class MovieFinderImpl implements MovieFinder {
    // ...
}

7.10.6命名自动检测的组件
如果你不想依赖默认的bean命名策略，你可以提供一个自定义的bean命名策略。
首先，实现 BeanNameGenerator 接口，并确保包含一个默认的无参数构造函数。
然后，在配置扫描仪时提供完全合格的类名称：
@Configuration
@ComponentScan（basePackages =“org.example”，nameGenerator = MyNameGenerator.class）
 public  class AppConfig {
    ...
}

<beans>
    <context：component-scan  base-package = “org.example”
        name-generator = “org.example.MyNameGenerator” />
</ beans>

7.10.7为自动检测组件提供一个范围
与一般的Spring管理组件一样，自动检测组件的默认和最常见的作用域是singleton.
However, sometimes you need a different scope which can be specified via the @Scope annotation

@Scope("prototype")
@Repository
public class MovieFinderImpl implements MovieFinder {
    // ...
}

To provide a custom strategy for scope resolution rather than relying on the annotation-based approach,
implement the ScopeMetadataResolver interface, and be sure to include a default no-arg constructor.
Then, provide the fully-qualified class name when configuring the scanner:

@Configuration
@ComponentScan(basePackages = "org.example", scopeResolver = MyScopeResolver.class)
public class AppConfig {
    ...
}

<beans>
    <context:component-scan base-package="org.example"
            scope-resolver="org.example.MyScopeResolver" />
</beans>

7.11.2 @Named and @ManagedBean: standard equivalents to the @Component annotation

7.12基于Java的容器配置
7.12.1基本概念：@Bean和@Configuration
该@Bean注释被用于指示一个方法实例，配置和初始化为通过Spring IoC容器进行管理的新对象。
对于那些熟悉Spring的<beans/>XML配置的人来说，@Bean注释和<bean/>元素具有相同的作用

In much the same way that Spring XML files are used as input when instantiating a ClassPathXmlApplicationContext,
@Configuration classes may be used as input when instantiating an AnnotationConfigApplicationContext.
This allows for completely XML-free usage of the Spring container:

public static void main(String[] args) {
    ApplicationContext ctx = new AnnotationConfigApplicationContext(AppConfig.class);
    MyService myService = ctx.getBean(MyService.class);
    myService.doStuff();
}

Building the container programmatically using register(Class<?>…​)

public static void main(String[] args) {
    AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();
    ctx.register(AppConfig.class, OtherConfig.class);
    ctx.register(AdditionalConfig.class);
    ctx.refresh();
    MyService myService = ctx.getBean(MyService.class);
    myService.doStuff();
}

Enabling component scanning with scan(String…​)

@Configuration
@ComponentScan(basePackages = "com.acme")
public class AppConfig  {
    ...
}

<beans>
    <context:component-scan base-package="com.acme"/>
</beans>

public static void main(String[] args) {
    AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();
    ctx.scan("com.acme");
    ctx.refresh();
    MyService myService = ctx.getBean(MyService.class);
}

The @Bean annotation supports specifying arbitrary initialization and destruction callback methods,
much like Spring XML’s init-method and destroy-method attributes on the bean element:

public class Foo {

    public void init() {
        // initialization logic
    }
}

public class Bar {

    public void cleanup() {
        // destruction logic
    }
}

@Configuration
public class AppConfig {

    @Bean(initMethod = "init")
    public Foo foo() {
        return new Foo();
    }

    @Bean(destroyMethod = "cleanup")
    public Bar bar() {
        return new Bar();
    }
}































