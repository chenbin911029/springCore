Spring教程 解耦合。
IOC 控制反转：创建对象的控制权交给了spring容器。
传统方式创建对象需要程序员手动 new classA();
现在由Spring容器来动态控制何时创建对象。  获得依赖对象的方式反转了

DI 依赖注入：对象之间存在依赖关系，被调用时，spring会把存在依赖关系的对象都动态注入到容器中。
动态创建对象。

2017-10-18
Spring自动装配Beans
2018 年3月找份16K的工作，立此flag. 2017 年10月20日，5个月时间好好把握。
Spring Bean作用域实例
单例：每个spring IOC 容器返回同一个bean实例
原型：每次请求返回一个新的bean实例
请求: 返回每个HTTP请求的一个Bean实例
会话: 返回每个HTTP会话的一个bean实例
全局会话：返回全局HTTP会话的一个bean实例
<!--加载属性配置文件 -->
<context:property-placeholder 
	file-encoding="UTF-8"
	location="classpath*:application.properties"
	ignore-resource-not-found="true"  />
	
<!--启用自动扫描组件 -->
<context:component-scan base-package="com.spring" />
springJDBC
@Component 组件声明，给自动扫描组件识别。
@Repository 声明为DAO，持久化操作，与业务层，应用层区分开来。
@Service 声明为业务层组件 MVC思想
@Scope("prototype") 声明对象的作用域 
prototype 原型，每次生成一个实例对象。 
singleton 单例，spring IOC 每次返回的都是同一个实例对象

Spring集合 (List,Set,Map,Properties) 实例
Spring EL以注解形式
String emailRegEx = "^[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)" +
			"*@[A-Za-z0-9]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$"
			
Spring AOP (面向方面编程)
Spring AOP实例(Pointcut,Advisor)
advice : 方法执行之前或之后采取的行动。
pointcut : 切入点，指哪些方法该拦截，通过方法的名称或正则表达式模式。
advisor : 将“通知”，和“切入点”分组成为一个单元，并把它传递到代理工厂对象。

Spring AOP拦截器的序列
Spring自动代理创建者实例
Spring有两个自动代理创建者来自动创建代理bean
BeanNameAutoProxyCreator 根据名称自动代理创建
Spring AOP+AspectJ注解实例

springAOP+AspectJ注解实例
将AspectJ注解集成到SpringAOP框架。
@Before 方法运行前
@After  运行在方法返回结果后
@AfterReturning 运行在方法返回一个结果后，在拦截器返回结果
@AfterThrowing 运行方法在抛出异常后
@Around 结合以上这三个通知

<!--aspectj自动代理 -->
<aop:aspectj-autoproxy />

dataSource数据源
<bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	<property name="driverClassName" value="${jdbc.driverClassName}" />
	<property name="url" value="${jdbc.url}" />
	<property name="username" value="${jdbc.username}" />
	<property name="password" value="${jdbc.password}" />
</bean>

Java Mail
spring boot
spring framework
ngix



































